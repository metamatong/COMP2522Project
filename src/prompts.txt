My Experience Communicating with the AI Bot for the Java Redlight Bloodlight Game

The best part of using the AI bot was the moment I used Grok3 to generate an initial, minimal version of the game logic. I had spent days conceptualizing how the game should work, and within seconds, the AI delivered a proof-of-concept that captured the core mechanics of player movement, light switching, and elimination. That instant when the basic game logic appeared on my screen felt like a breakthrough. It only showed some alphabet letters like “P” for player and “N” for NPC moving up and down in a small screen representing movement of players. However, it was still perfectly conveying the core of my game. It not only saved me time but also gave me the confidence to experiment with additional features and refine the game further. I found it exciting to see my ideas come together almost immediately through the AI’s assistance. This rapid prototyping allowed me to test my concepts quickly and iterate over the design, leading to several innovative improvements later on.

Another highlight was the AI’s ability to integrate various Java concepts such as enums, collections, and lambda expressions seamlessly into the code. I appreciated how the AI explained these features in a clear and concise manner, reinforcing the principles we learned in class. Although I learned those concepts from the OOP course, I still had to go back to what I learned whenever I had any question. It could have been a few hours of Googling if we didn’t have chatGPT. Now, I could get my answer right away. The integration of these features into the Redlight Bloodlight game project was not only educational but also fun. The game, with its dynamic rules and interactive elements, became even more engaging knowing that every technical detail—from using JavaFX for the GUI to implementing event-driven programming with AnimationTimer—had been carefully thought out with the help of the AI.

Especially, when I wanted to use this CountDownLatch to manage multiple threads and still provide seamless experience to users, I had to ask many questions to chatGPT to understand what latch does correctly. Because of chatGPT, I could manage two threads, one for main menu and the other for JavaFX based game, to handle different erroneous scenarios the game can cause. This could’ve been dayes of work to study new concept and actually adopt it but ChatGPT made it possible in just a few hours.

However, the experience wasn’t without its drawbacks. One significant frustration was having to copy and paste large portions of my codebase every time I needed to ask a question or get a code review from the AI. While the AI is powerful and knowledgeable, the process of re-supplying the entire context repeatedly was time-consuming and sometimes disrupted my workflow. It felt like I was constantly reintroducing my work, and I lost a bit of the continuity that I had built over many hours of coding. This repetitive task detracted from the overall efficiency and occasionally made the process feel mechanical rather than creative. It became much serious issue when my code base went over a thoudsand lines. AI was keep on making minor mistaked and I had to go over my code thoroughly so that I don’t miss any GPT-made mistakes.

There were also moments when the AI provided answers that were overly verbose or missed the mark on my specific context. Although the initial concept generation with Grok3 was fantastic, later on I noticed that sometimes the responses did not fully account for all the nuances of my project. For example, subtle details like how the player should behave after they die in the game’s logic or rendering code responsible for drawing sprite of the players would be overlooked, requiring me to further tweak the solution manually. While this was ultimately useful as a starting point, it did mean that I often had to spend additional time debugging and refining the code to align with my original design goals.

On a positive note, I found that the AI’s guidance on best practices and design patterns was particularly useful. The suggestions regarding separation of concerns and the MVC-style approach in my GameLogic class helped me organize my code in a way that was both scalable and maintainable. This was especially beneficial in a project as multifaceted as the Redlight Bloodlight game, where many components interact in real time. The AI's insights into structuring my code not only improved the game’s performance but also enhanced my understanding of good software engineering practices.

Furthermore, the AI was very helpful in explaining how to write comprehensive tests using JUnit 5. I learned how to create unit tests for core gameplay functionality, as well as smoke tests for audio and GUI rendering components. These testing strategies have greatly improved the stability of my game. Even though I had to adjust some tests to match my code’s design, the AI’s initial test suggestions were a great foundation. I now feel more confident in my ability to maintain high code quality and ensure that new changes do not break existing functionality.

In conclusion, the experience of working with the AI bot was a mixed bag of exhilarating breakthroughs and a few workflow hurdles. The instant generation of initial game logic with Grok3 was undoubtedly the best moment—it provided a spark of creativity and efficiency that I had not experienced before. On the other hand, the need to continuously paste my full code context slowed me down at times and required extra patience. Overall, the process taught me a lot about both technical problem solving and the importance of clear, consistent communication when collaborating with an AI assistant. The game itself, being both unique and fun, stands as a testament to the valuable insights and improvements that the AI contributed to my development process.

I look forward to further refining my project and exploring more ways in which intelligent assistance can be integrated into the software development workflow.

The journey was not just about solving a coding challenge; it was also about learning to adapt, iterate, and appreciate the blend of human creativity with AI efficiency. This balance of rapid prototyping and iterative improvement has become one of the most rewarding aspects of my development experience in this course.

